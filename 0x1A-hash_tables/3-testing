#include "hash_tables.h"
/**
 * create_item - This is function that return the new item
 * @key: This is an argument that reprsent the given key
 * @value: This is an argument that reorsent the given value
 *
 * Return: This function return the pointer
 */
hash_node_t *create_item(const char *key, const char *value)
{
	hash_node_t *item;

	item = malloc(sizeof(hash_node_t));
	if (!item)
		return (NULL);

	item->key = strdup(key);
	item->value = strdup(value);
	item->next = NULL;
	return item;
}
/**
 * handle_collision - This is a function that handle the collision in
 * inserting
 * @ht: This is an argument that reprsent the hash table
 * @index: This is an argument that reprsent the index
 * @key: This is an argument that reprsent the key
 * @value: This is an argument that reprsent the value
 *
 * Return: This function 1 if success otherwise 0
 */
int handle_collision(hash_table_t *ht, unsigned long int index, const char *key, const char *value)
{
	hash_node_t *item;

	item = create_item(key, value);
	if (!item)
		return (0);
	ht->array[index] = item;

	return (1);
}
/**
 * hash_table_set - This is a function thqt return the added element to the
 * hash table.
 * @ht: This is an argumemt that reprsent the hash table
 * @key: This is an argument that reprsent the given key value
 * @value: This is an argument that reprsent the given value
 *
 * Return: This function return an 1 if is success otherwise 0
 */
int hash_table_set(hash_table_t *ht, const char *key, const char *value)
{
	int index;
	hash_node_t *item, *curr_item, *tmp;

	if (!ht || !key || !value || strlen(key) == 0)
		return (0);

	item = create_item(key, value);
	if (!item)
		return (0);

	index = key_index((const unsigned char *)key, ht->size);

	curr_item = ht->array[index];
	tmp = curr_item;

	if (!curr_item)
	{
		ht->array[index] = item;
		return (1);
	}
	else
	{
		if (strcmp(curr_item->key, key) == 0)
		{
			free(curr_item->value);
			curr_item->value = strdup(value);
			return (1);
		}
		else
		{
			if (curr_item->next)
			{
				while (tmp)
				{
					if (strcmp(tmp->key, key) == 0)
					{
						free(tmp->value);
						tmp->value = strdup(value);
						return (1);
					}
					tmp = tmp->next;
				}
			}
		}
	}
	return (handle_collision(ht, index, key, value));
}

